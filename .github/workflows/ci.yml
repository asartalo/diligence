name: Continuous Integration and Delivery

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v2

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: commitlint
    outputs:
      branch: ${{ steps.branchinfo.outputs.branch }}

    steps:
      - name: Store the branch name
        id: branchinfo
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Check if we were able to save branch info
        run: echo ${{ steps.branchinfo.outputs.branch }}

      - uses: actions/checkout@v3

        # Setup Java environment in order to build the Android app.
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable" # 'beta' # 'dev', 'alpha', default to: 'stable'
          # flutter-version: '1.12.x' # you can also specify exact version of flutter

      # Generate a temporary .env file
      - run: echo "DILIGENCE_DEV_TODAY=2020-12-30" > .env

      # Get flutter dependencies.
      - run: flutter pub get

      - name: Code Formatting
        run: dart format --set-exit-if-changed .

      - name: Static Analysis
        run: flutter analyze .

      - name: Unit Tests
        run: flutter test --no-pub --coverage --coverage-path=./coverage/lcov.base.info

      - name: Patch for linux build
        run: |
          flutter doctor
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev lcov
          flutter doctor

      - name: Run Integration Tests
        run: xvfb-run flutter test -d linux --no-pub --coverage --merge-coverage integration_test/all_tests.dart

      - name: Upload coverage
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage/lcov.info

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.outputs.branch == 'release' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - run: flutter config --enable-linux-desktop

      # Get flutter dependencies.
      - run: flutter pub get

      - name: Install release_tools
        run: dart pub global activate release_tools

      - name: Hookup pub tools
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Prepare release
        run: |
          release_tools prepare_release -w
          cat VERSION.txt || echo "No Release"

      - name: Get Release Info
        id: releaseInfo
        run: |
          if [ -e VERSION.txt ]
          then
            shouldRelease="yes"
            releaseVersion=$(cat VERSION.txt)
            summary=$(cat RELEASE_SUMMARY.txt)
            echo "version=${releaseVersion}" >> $GITHUB_OUTPUT
            {
              echo 'summary<<EOF'
              echo summary
              echo EOF
            } >> $GITHUB_OUTPUT
          else
            shouldRelease="false"
          fi
          echo "shouldRelease=${shouldRelease}" >> $GITHUB_OUTPUT

      - name: Install Build Dependencies
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libsqlite3-dev

      - name: Build
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          touch .env
          flutter build linux

      - name: Commit Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): prepare release for ${{ steps.releaseInfo.outputs.version }}"
          git push

      - name: Gzip
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: cd build/linux && tar -czvf release-${{ steps.releaseInfo.outputs.version }}.tar.gz release

      - name: Create Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        id: createRelease
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.PAT }}
          tag: ${{ steps.releaseInfo.outputs.version }}
          name: Release ${{ steps.releaseInfo.outputs.version }}
          artifacts: build/linux/release-*.tar.gz
          body: |
            Changes in this Release

            ${{ steps.releaseInfo.outputs.summary }}

          draft: false
          prerelease: false
