name: Release
on:
  push:
    branches:
      - release
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - run: flutter config --enable-linux-desktop

      # Get flutter dependencies.
      - run: flutter pub get

      - name: Install release_tools
        run: dart pub global activate release_tools

      - name: Hookup pub tools
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Prepare release
        run: |
          release_tools prepare_release -w
          cat VERSION.txt || echo "No Release"

      - name: Get Release Info
        id: releaseInfo
        run: |
          if [ -e VERSION.txt ]
          then
            shouldRelease="yes"
            releaseVersion=$(cat VERSION.txt)
            summary=$(cat RELEASE_SUMMARY.txt)
            echo "version=${releaseVersion}" >> $GITHUB_OUTPUT
            {
              echo 'summary<<EOF'
              echo summary
              echo EOF
            } >> $GITHUB_OUTPUT
          else
            shouldRelease="false"
          fi
          echo "shouldRelease=${shouldRelease}" >> $GITHUB_OUTPUT

      - name: Install Build Dependencies
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libsqlite3-dev

      - name: Build
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          touch .env
          flutter build linux

      - name: Commit Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): prepare release for ${{ steps.releaseInfo.outputs.version }}"
          git push

      - name: Create Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        id: createRelease
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.PAT }}
          tag: ${{ steps.releaseInfo.outputs.version }}
          name: Release ${{ steps.releaseInfo.outputs.version }}
          body: |
            Changes in this Release

            ${{ steps.releaseInfo.outputs.summary }}

          draft: false
          prerelease: false

      - name: Gzip
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: cd build/linux && tar -czvf release.tar.gz release

      - name: Upload Release Asset
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createRelease.outputs.upload_url }}
          asset_path: ./build/linux/release.tar.gz
          asset_name: release.tar.gz
          asset_content_type: application/gzip
