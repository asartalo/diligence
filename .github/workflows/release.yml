name: Release
on:
  push:
    branches:
      - main
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: subosito/flutter-action@v1
        with:
          channel: 'dev'

      - run: flutter config --enable-linux-desktop

      - name: Latest Release
        id: latestRelease
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          exclude_types: "release"
          view_top: 1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # Get flutter dependencies.
      - run: flutter pub get

      - run: echo "${{ steps.latestRelease.tag_name }}"

      - name: Check if we should release
        id: checkShouldRelease
        run: |
          output=$(flutter pub run --no-sound-null-safety diligence shouldRelease )
          echo "::set-output name=should::$output"

      - if: steps.checkShouldRelease.outputs.should == 'yes'
        run: echo "Will release"

      - if: steps.checkShouldRelease.outputs.should == 'no'
        run: echo "No release"

      - name: Track Changes
        id: trackChanges
        run: |
          flutter pub run --no-sound-null-safety diligence release
          echo "::set-output name=version::$(cat NEWVERSION.txt)"
          echo "::set-output name=summary::$(cat SUMMARY.md)"

      - name: Check version
        if: steps.checkShouldRelease.outputs.should == 'yes'
        run: cat NEWVERSION.txt
        
      - name: Install Build Dependencies
        if: steps.checkShouldRelease.outputs.should == 'yes'
        run: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libsqlite3-dev

      - name: Build
        if: steps.checkShouldRelease.outputs.should == 'yes'
        run: |
          touch .env
          flutter build linux

      - name: Commit Release
        if: steps.checkShouldRelease.outputs.should == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): release for ${{ steps.trackChanges.outputs.version }}"
          git push

      - name: Create Release
        if: steps.checkShouldRelease.outputs.should == 'yes'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.trackChanges.outputs.version }}
          release_name: Release ${{ steps.trackChanges.outputs.version }}
          body: |
            Changes in this Release ${{ steps.trackChanges.outputs.summary }}

          draft: false
          prerelease: false

      - name: Gzip
        if: steps.checkShouldRelease.outputs.should == 'yes'
        run: cd build/linux && tar -czvf release.tar.gz release

      - name: Upload Release Asset
        if: steps.checkShouldRelease.outputs.should == 'yes'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/linux/release.tar.gz
          asset_name: release.tar.gz
          asset_content_type: application/gzip
